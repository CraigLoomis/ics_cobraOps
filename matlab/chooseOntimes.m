%% Autogenerated Motormaps
%% this script runs ONLY on the testbedcomputer
close all
clear all

%% INPUTS

% Define test directory with folders containing the streak images
topdir = '.';

% Specify number of buckets (leave at 100 if unsure)
numBuckets = 100;

% bw threshold will be bwfactor*mean(img)
bwfactor = 1.5; % reduce this if your circles dont appear fully on the bw image.

% Sensitivity of Hough transform circle detection (higher will detect more
% circles) range is between 0 and 1
thetaCircSnstvty = 0.95;
phiCircSnstvty = 0.95;

%Define the Range in which the Circle-Radii are. (in px)
phiradiusRange = [20, 35]; %For PHI = [20, 40], 
thetaradiusRange = [40, 120]; %for THETA = [40, 120]

% What interval are motors using?
interval = 2.5; %ms

% Which image should be used to get centers initially. Specify 
cntrImgFilter = 'S1_ontime_140';


%% EXECUTION

% Get list of images from directory
% images = dir2cell(fullfile(topdir, '*.fits'));
images = ls(fullfile(topdir, '*.fits'));
for ii=1:length(images(:,1))
    imageCells{ii} = images(ii,:);
end
images = imageCells;


% Determine which stage
stages = regexp(reshape(char(images)',1,[]),'(?<=S)\d(?=_ontime)','match');
stage = stages{1};% assume first is correct

switch stage
    case '1'
        circSnstvty = thetaCircSnstvty;
        radiusRange = thetaradiusRange;
    case '2'
        circSnstvty = phiCircSnstvty;
        radiusRange = phiradiusRange;
end




notok = true;
while notok
    
    intensities.pId1 = [];
    intensities.pId2 = [];
    intensities.pId3 = [];
    intensities.pId4 = [];
    intensities.pId5 = [];
    intensities.pId6 = [];
    intensities.pId7 = []; 
    intensities.pId8= [];
    intensities.pId9 = [];
    
    hardstops.pId1 = [];
    hardstops.pId2 = [];
    hardstops.pId3 = [];
    hardstops.pId4 = [];
    hardstops.pId5 = [];
    hardstops.pId6 = [];
    hardstops.pId7 = [];
    hardstops.pId8 = [];
    hardstops.pId9 = [];
    
    overloads = [];
    imageMatrix = [];
    
    
    % Look for image with streak to find centers
    for nim = 1:length(images)
%         imagefile = char(strcat(topdir,images(nim)));
% keyboard
        imagefile = char(images{nim});
        if exist('cntrImgFilter','var')
            fitsfile =imagefile;
        elseif(strfind(imagefile, 'cntrStrk'))
            fitsfile =imagefile;
        elseif  (strfind(imagefile, 'streaks2rv_'))
            fitsfile =imagefile;
        elseif  (strfind(imagefile, 'centerStrk_'))
            fitsfile =imagefile;
        end
    end
    img = imread(fitsfile);
    imgsize = size(img);
    
    % Use initial bwfactor to create bw thresholded image
    imrs = reshape(img, 1, 2048*2048);
    myLowerThresh = bwfactor* mean(imrs);
    clear imrs;
    bw_mine  = (img > myLowerThresh);
    figure(1), imagesc(bw_mine);
    hold on;
    
    % Find centers and radii
    [centers, radii] = imfindcircles(bw_mine, radiusRange,'ObjectPolarity','bright', 'Sensitivity' , circSnstvty);
    [r, c, rad] = circlefinder(bw_mine, radiusRange(1), radiusRange(2), 0.13);
    if(~isempty(centers))
        crm = horzcat(centers, radii);
        crm = sortrows(crm, 1);
        crm = flipud(crm);
        crm = horzcat(crm(:,1) + 1i * crm(:,2), crm(:,3));
         %cs = centers(:,1) + centers(:,2) * 1i;
    else
        cs = c + r * 1i;
        radii = rad;
        crm = horzcat(cs, radii);
        crm = sortrows(crm);
        crm = flipud(crm);
    end
    
    if(isempty(crm))
    else
        plot(crm(:,1), 'r*');
    end
    
    
    % Create Window to /Check
    % Construct a questdlg with three options
    choice = questdlg('Are all positioner centers found?', ...
        'Center Check in Figure 1', ...
        'Yes','No, the circles are to faint', 'No, the circles are to thick','No, the circles are to thick');
    % Handle response
    switch choice
        case 'Yes'
            disp([choice ' coming right up.'])
            notok = false;
        case 'No, the circles are to faint'
            disp([choice '. So I will decrease threshold and rerun.'])
            bwfactor = bwfactor*0.8;
        case 'No, the circles are to thick'
            disp('I''ll increase threshold and rerun.')
            bwfactor = bwfactor*1.2;
    end
end

for cobra = 1:length(crm(:,1))
    tcbr = plot(crm(cobra,1),'go');
    pId(cobra) = inputdlg('Which PID is this cobra in MSIM?');
	delete(tcbr);
end
    


%% Calculate Intensity

% Angular size of the pie:
resolution_angle=2*pi/numBuckets;
angles=[resolution_angle:resolution_angle:2*pi];
check = 0;
cc=1;



for ps = 1:length(crm(:,1))
    
    % Create figure for ontime comparisons
    clear otfh;
    otfh = figure('Name','OnTime Tuning');
    otfhs1 = subplot(1,2,1);
    xlabel('Current OnTime')
    prv = allchild(otfhs1);
    axis equal;
    otfhs2 = subplot(1,2,2);
    xlabel('Next OnTime')
    axis equal;
    finished = 0;
    cbh1 = uicontrol('Style', 'checkbox', 'String', 'Select this ontime',...
            'Position', [10 10 200 20],...
            'Callback', 'finished=1; selectedOntimes(ps) = ontimes(cc-1);');
    
    for nDir = [1:length(images)]
        
        if finished ==1
            uiresume;
            break;
        end
        
        disp(strcat('Now processing',images{nDir}));
        imagefile = images{nDir};
        
        %Read Intensity
        imageMatrix=imread(imagefile);
        S = images(nDir);
        trex = regexp(S,'(?<=ontime_)\d*','match');
        if isempty(trex{1})
            continue  
        end
        
        A = regexp(S,'ImageId_\d*','match');
        ontimes(cc) = str2num(trex{1}{1});
        isRV = true;
        
        
%         use = true;
        pid = sprintf('pId%s',pId{ps}) ;
        cobracenter = crm(ps,1);
        min_range = floor(crm(ps,2)) - 10;
        max_range = floor(crm(ps,2)) + 8;
        [intensity.(pid), overload ] = getIntensityN( cobracenter, min_range, max_range, imageMatrix, resolution_angle, topdir, nDir, numBuckets, ontimes(cc), ps);
        

        
        ih1 = get(15,'Children');
        killme = findobj(prv,'type','text');
        delete(killme);
        prv = copyobj(allchild(otfhs2),otfhs1);
        cur = copyobj(allchild(ih1),otfhs2);
        title(otfhs2,sprintf('%s ontime=%dms',pid,ontimes(cc)));
        xlabel(otfhs1,'Current OnTime')
        close 15;
        
        
        
        pause;
        cc = cc+1;
        
    end
end

% Set any ontimes which were not selected to the max for that stage
selectedOntimes(selectedOntimes==0) = max(ontimes);

% Determine which stage and direction this data is for
stages = regexp(reshape(char(images)',1,[]),'(?<=S)\d(?=_ontime)','match');
dirs = regexp(reshape(char(images)',1,[]),'(?<=_ontime_\d*_*us_)(fw|rv)','match');
stage = stages{1};% assume first is correct
dir = dirs{1}; % assume first is correct

% Package the resulting ontimes into CobraConfig
ConfigTemplate = loadCfgXml;
pids = cellfun(@str2num,pId);
for pid = 1:max(pids)
    armfld = sprintf('ARM_DATA_%d',pid);
    if isfield(ConfigTemplate.ARM_DATA,armfld)
        CobraConfig.ARM_DATA.(armfld) = ConfigTemplate.ARM_DATA.(armfld);
    else
        CobraConfig.ARM_DATA.(armfld) = ConfigTemplate.ARM_DATA.ARM_DATA_1;
    end
end
for ii = 1:length(pids)
    
    switch stage
        
        case '1' % Theta
            
            
            % Save centers
            CobraConfig = setARMval(CobraConfig,pids(ii),'Global_base_pos_x',real(crm(ii,1)));
            CobraConfig = setARMval(CobraConfig,pids(ii),'Global_base_pos_y',imag(crm(ii,1)));
            
            switch dir
                case 'fw'
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link1_fwd_Duration',selectedOntimes(ii)/1000);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link1_fwd_Intervals',interval);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link1_fwd_Duration_Slow',selectedOntimes(ii)/1000);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link1_fwd_Intervals_Slow',interval);
                case 'rv'
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link1_rev_Duration',selectedOntimes(ii)/1000);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link1_rev_Intervals',interval);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link1_rev_Duration_Slow',selectedOntimes(ii)/1000);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link1_rev_Intervals_Slow',interval);
            end
            
        case '2' % Phi
            switch dir
                case 'fw'
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link2_fwd_Duration',selectedOntimes(ii)/1000);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link2_fwd_Intervals',interval);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link2_fwd_Duration_Slow',selectedOntimes(ii)/1000);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link2_fwd_Intervals_Slow',interval);
                case 'rv'
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link2_rev_Duration',selectedOntimes(ii)/1000);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link2_rev_Intervals',interval);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link2_rev_Duration_Slow',selectedOntimes(ii)/1000);
                    CobraConfig = setARMval(CobraConfig,pids(ii),'Link2_rev_Intervals_Slow',interval);
            end
    end
end

[xmlfile, xmlfilepath] = uiputfile('*.xml','Save new CobraConfig XML file with ontimes and centers');
cobraCfg2xml(CobraConfig,fullfile(xmlfilepath,xmlfile));    
    



